// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id
  sessions      Session[]
  username      String         @unique
  name          String?
  password_hash String
  role          Role           @default(USER)
  avatar        Avatar?
  notifications Notification[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Person {
  id         Int        @id @default(autoincrement())
  name       String
  relations1 Relation[] @relation("PersonRelation1")
  relations2 Relation[] @relation("PersonRelation2")

  @@map("people")
}

model Avatar {
  id      Int      @id @unique @default(autoincrement())
  variant String   @default("beam")
  hex     String[] @default(["#92A1C6", "#146A7C", "#F0AB3D", "#C271B4", "#C20D90"])
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String   @unique

  @@map("avatars")
}

model Relation {
  id        Int    @id @default(autoincrement())
  person1Id Int
  person2Id Int
  person1   Person @relation("PersonRelation1", fields: [person1Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  person2   Person @relation("PersonRelation2", fields: [person2Id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("relations")
}

model Notification {
  id                     Int                  @id @default(autoincrement())
  template               NotificationTemplate @relation(fields: [notificationTemplateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  origin                 User?                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                 String?
  notificationTemplateId Int
  createdAt              DateTime             @default(now())
}

model NotificationTemplate {
  id           Int              @id @default(autoincrement())
  name         String
  type         NotificationType
  content      String
  notification Notification[]
}

enum NotificationType {
  SOCIAL
  TECHNICAL
}

enum Role {
  USER
  ADMIN
}
