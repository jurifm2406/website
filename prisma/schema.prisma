generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id
  username          String         @unique
  name              String?
  password_hash     String
  role              Role           @default(user)
  notifications_out Notification[] @relation("NotificationFromUser")
  sessions          Session[]
  avatar            Avatar?
  notifications_in  Notification[] @relation("NotificationToUser")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Person {
  id         Int        @id @default(autoincrement())
  name       String
  relations1 Relation[] @relation("PersonRelation1")
  relations2 Relation[] @relation("PersonRelation2")

  @@map("people")
}

model Avatar {
  id      Int           @id @unique @default(autoincrement())
  userId  String        @unique
  hex     String[]      @default(["#92A1C6", "#146A7C", "#F0AB3D", "#C271B4", "#C20D90"])
  variant AvatarVariant @default(beam)
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("avatars")
}

model Relation {
  id        Int    @id @default(autoincrement())
  person1Id Int
  person2Id Int
  person1   Person @relation("PersonRelation1", fields: [person1Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  person2   Person @relation("PersonRelation2", fields: [person2Id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("relations")
}

model Notification {
  id                     Int                  @id @default(autoincrement())
  notificationTemplateId Int
  createdAt              DateTime             @default(now())
  originId               String
  template               NotificationTemplate @relation(fields: [notificationTemplateId], references: [id], onDelete: Cascade)
  origin                 User                 @relation("NotificationFromUser", fields: [originId], references: [id], onDelete: Cascade)
  destinations           User[]               @relation("NotificationToUser")
}

model NotificationTemplate {
  id           Int              @id @default(autoincrement())
  name         String
  type         NotificationType
  content      String
  notification Notification[]
}

enum AvatarVariant {
  beam
  bauhaus
}

enum NotificationType {
  social
  technical
  warning
}

enum Role {
  user
  admin
}
